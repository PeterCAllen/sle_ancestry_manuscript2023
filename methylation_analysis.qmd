# 2023 SLE AA/EA LN-/+ DNA Methylation Analysis

## Regression Analysis
```{r}
library(tidyverse)
library(minfi) 
library(limma) 
library(DMRcate) 
library(maxprobes) 
library(ggrepel) 
library(ggfortify) 
library(gplots) 
library(RColorBrewer) 
library(ChAMP)

################ Reading in files ################

### Read in the sample sheet with the phenotypic data
setwd("/cluster/home/pcallen/tmp_analysis/uab_sle_methylation_ancestry_study")

targets <- read.metharray.sheet("/cluster/home/pcallen/projects/uab_sle_96/methylationEpic/data/raw/idats/")
meta <- read_csv("data/metadata.csv")

targets <- left_join(targets, meta, by=c("Sample_Name" = "uab_id"))

RGset <- read.metharray.exp(targets = targets, force = TRUE, verbose=TRUE)
colnames(RGset) <- targets$Sample_Name[match(basename(targets$Basename),colnames(RGset))]

################ Quality control ################ 

# qc report
qcReport(RGset, pdf="20230122_1_minfi_qcReport.pdf", sampGroups=RGset$disease, sampNames=RGset$Sample_Name)

# detection p-values
p_values <- detectionP(RGset, type="m+u")

# mean detection p-values
mean_p <- data.frame(p_values=colMeans(p_values), Sample=RGset$Sample_Name)

# plotting the mean detection p-values
ggplot(mean_p, aes(x=Sample, y=p_values, fill=p_values))+
  geom_col()+
  geom_hline(yintercept=0.01, linetype="dashed", color="red")+
  ggtitle("Mean detection p-value per sample")+
  theme_bw()+
  theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(), 
        axis.text.x=element_text(angle=30, vjust=1, hjust=1))

ggsave(filename = "20230123_2_meanDetP.png")

# removing sample with high detP
failed <- p_values > 0.05
colMeans(failed) # Fraction of failed positions per sample [P3UAB0076 had 78.4% failed probes]
failed.samples <- colMeans(failed) > 0.1 # samples that had more than 5% missing data


RGset <- RGset[,!failed.samples] # remove the bad sample prior to normalization

################ Processing and normalization of data ################
background.subtracted.data <- preprocessNoob(RGset)

# Quantile Normalize Data
normalized.data <- preprocessQuantile(background.subtracted.data)

# Removing low quality probes [97220 CpGs]
keep <- rowSums(p_values < 0.01) >= (ncol(normalized.data) * .98) # keep those that passed qc in at least 98% of samples
normalized.data <- normalized.data[keep,]

# Removing probes with known SNPs [27069 Cpgs]
gmSet <- dropLociWithSnps(mapToGenome(normalized.data))

# Removing cross reactive probes [36442 Cpgs]
xreactive_probes <- xreactive_probes(array_type="EPIC")
keep <- !(featureNames(gmSet) %in% xreactive_probes)
gmSet <- gmSet[keep,]

# Removing Smoking CpGs
smoking_cpgs <- read_csv("data/smoking_cpgs.csv")
which(smoking_cpgs$IlmnID %in% featureNames(gmSet)) %>% length() # 816 cpgs
keep <- !(featureNames(gmSet) %in% smoking_cpgs$IlmnID)
gmSet <- gmSet[keep,]

# Extracting beta values
beta_values <- getBeta(gmSet)
head(beta_values[,1:6])

cell_proportions <- ChAMP::champ.refbase(beta=beta_values,arraytype="EPIC")
celltype <- cell_proportions$CellFraction

################ Principal Component Analysis ################ 

# PCA on the most variable sites
# selecting the top 100 most variable CpGs
sdv <- apply(beta_values,1, sd)
keep <- names(head(sort(sdv,decreasing=T), 100))
beta_top100 <- beta_values[keep,]

# PCA calculation
pca_res <- prcomp(t(beta_top100), scale=T, center=T) # ! the matrix needs to transpose

meta <- meta %>% as.data.frame()
rownames(meta) <- meta$uab_id
meta_sub <- meta[colnames(beta_values),]

# Plotting by condition
png("20230123_3_pca_top100betas.png", width = 15, height=15, units = "in", res=300)
autoplot(pca_res, data=meta_sub, colour='disease_subset')+
  geom_text_repel(aes(label=uab_id, color=disease),hjust=-0.1, vjust=0, show.legend=F, size=4)+
  scale_color_brewer(palette="Set2")+ 
  theme_bw()+
  ggtitle("PCA by condition")
dev.off()

################ Differential methylation analysis ################ 
#metadata
normalized.data.pdata_subset <- meta %>% 
  filter(uab_id %in% colnames(beta_values) &
           methylationEPIC_data == TRUE &
           methylationEPIC_passed_qc == TRUE &
           GDA_data == TRUE &
           GDA_genetic_outlier == FALSE) 

# beta data
normalized_betas_subset <- beta_values[,normalized.data.pdata_subset$uab_id]

# convert to M-values
mVals <- ENmix::B2M(normalized_betas_subset)

# Set levels for factor
normalized.data.pdata_subset$disease  <- relevel(factor(normalized.data.pdata_subset$disease), ref="control")

# importing genetic data
genetic_eigenVecs <- read.table("~/projects/uab_sle_96/genotyping/local_ancestry_plink/plink/uab_sle_pca_adjusted.eigenvec") %>% 
  dplyr::select(-1)
colnames(genetic_eigenVecs) <- c("uab_id", paste0("gen_pc",1:20))

normalized.data.pdata_subset_genetics <- left_join(normalized.data.pdata_subset, genetic_eigenVecs, by="uab_id") %>% 
  column_to_rownames("uab_id")

# calculating pcs for cell types
library(PCAmixdata)

split <- splitmix(celltype)
celltype_pcs <- PCAmix(X.quanti = split$X.quanti, rename.level = TRUE, graph = FALSE)
celltype_pcs$eig # first 3 PCs accounted for 81.51059% of variance

#         Eigenvalue   Proportion Cumulative
# dim 1 2.491867e+00 4.153112e+01   41.53112
# dim 2 1.609815e+00 2.683025e+01   68.36137
# dim 3 7.889534e-01 1.314922e+01   81.51059
# dim 4 6.151641e-01 1.025273e+01   91.76333
# dim 5 4.941984e-01 8.236640e+00   99.99997
# dim 6 1.939843e-06 3.233071e-05  100.00000

celltype_pcs_ind <- celltype_pcs$ind$coord[,1:3] #only taking first 3 PCs
colnames(celltype_pcs_ind) <- c("celltype_pc1", "celltype_pc2", "celltype_pc3")

normalized.data.pdata_subset_genetics_cell <- left_join((normalized.data.pdata_subset_genetics %>% rownames_to_column("uab_id")), (as.data.frame(celltype_pcs_ind) %>% rownames_to_column("uab_id")), by="uab_id") %>%
  column_to_rownames("uab_id")

# Design Matrix with Covariate of Interest as 1st Covariate
design=model.matrix(~ disease + age + gen_pc1 + gen_pc2 + gen_pc3 + gen_pc4 + gen_pc5 + gen_pc6 + gen_pc7 + gen_pc8 + gen_pc9 + gen_pc10 + celltype_pc1 + celltype_pc2 + celltype_pc3, normalized.data.pdata_subset_genetics_cell) 

# Model
fit = lmFit(mVals, design)
fit.e = eBayes(fit)
IV=colnames(fit$coefficients)[2]

# Output Regression Results
library(ChAMPdata)
data(probe.features.epic)
probe.features <- probe.features %>% 
  rownames_to_column("CpG")

DMP = topTable(fit.e,coef=IV, adjust.method="BH",sort.by = "P", num=Inf) %>%
  rownames_to_column("CpG") %>%
  left_join(probe.features,by="CpG") # add probe info. 

## Calculate Inflation Value (lambda)
library(qqman)
set.seed(1234)

chi_base=qchisq(DMP$P.Value,df=1,lower.tail=FALSE)
lambda_base <- round(median(chi_base)/.454,3)
lambda_base #1.161

png(filename="~/tmp_analysis/uab_sle_methylation_ancestry_study/qq_30jan2023.png", units="in", width=11, height=8.5, res=300,pointsize=18)
qq(DMP$P.Value, main = paste("Q-Q plot (lamdba=", lambda_base , ")", sep = " "))
dev.off()

```

## Top 20 Differentially Methylation CpGs
```{r}

isolate_sig <- DMP %>% dplyr::select(CpG, gene, P.Value, adj.P.Val) %>% filter(adj.P.Val<0.05) %>% head(n=20)

sig_cpgs <- isolate_sig %>% pull("CpG")

keep <- match(sig_cpgs, rownames(normalized_betas_subset))
DMP_beta_sig <- data.frame(normalized_betas_subset[keep, ])

# Stratify disease/control and race
combined_betas <- DMP_beta_sig %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="uab_id") %>% 
  setDT()

meta.dt <- meta %>% 
  setDT()

combined_data <- combined_betas[meta.dt, on = "uab_id", nomatch=0]

combined_data <- combined_data %>% setDF() %>% dplyr::relocate(uab_id, race, sex, age, disease, disease_subset, sel_score, slicc_index, acr_total_points, notes)

agreggated_cpgs <- combined_data %>% 
  group_by(race, disease_subset) %>% 
  summarise(across(contains("cg"), mean))

agreggated_cpgs <- agreggated_cpgs %>% 
  mutate(separator = paste(race, disease_subset, sep = "_")) %>% 
  relocate(separator) %>% 
  t() %>% 
  as.data.frame() %>% 
  janitor::row_to_names(row_number = 1) %>% 
  rownames_to_column("CpG") %>% 
  as_tibble() %>% 
  filter(!row_number() %in% c(1, 2))

# Annotate CpGs
EPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b2.hg19) %>% 
  as.data.frame() %>% 
  dplyr::select(chr, pos, UCSC_RefGene_Group) %>% 
  dplyr::filter(rownames(.) %in% sig_cpgs) %>% 
  rownames_to_column("CpG")

#join the three data frames
CpG_table_top20 <- isolate_sig %>%
  left_join(EPIC, by='CpG') %>% 
  left_join(agreggated_cpgs, by='CpG') %>% 
  relocate(CpG, gene, chr, pos, UCSC_RefGene_Group, AA_control, `AA_ln-`, `AA_ln+`, EA_control, `EA_ln-`, `EA_ln+`, P.Value, adj.P.Val) %>% 
  na_if("") %>% 
  as_tibble()

# Write Top20 Table 
write_csv(CpG_table_top20, 
          file = "top20_cpgs_table.csv")
```

## Extracting Top Associated CpGs (51)
```{r}
isolate_sig <- DMP %>% dplyr::select(CpG, gene, P.Value, adj.P.Val) %>% filter(adj.P.Val<0.05) 

sig_cpgs <- isolate_sig %>% pull("CpG")

keep <- match(sig_cpgs, rownames(normalized_betas_subset))
DMP_beta_sig <- data.frame(normalized_betas_subset[keep, ])

# Stratify disease/control and race
combined_betas <- DMP_beta_sig %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="uab_id") %>% 
  setDT()

meta.dt <- meta %>% 
  setDT()

combined_data <- combined_betas[meta.dt, on = "uab_id", nomatch=0]

combined_data <- combined_data %>% setDF() %>% dplyr::relocate(uab_id, race, sex, age, disease, disease_subset, sel_score, slicc_index, acr_total_points, notes)

agreggated_cpgs <- combined_data %>% 
  group_by(race, disease_subset) %>% 
  summarise(across(contains("cg"), mean))

agreggated_cpgs <- agreggated_cpgs %>% 
  mutate(separator = paste(race, disease_subset, sep = "_")) %>% 
  relocate(separator) %>% 
  t() %>% 
  as.data.frame() %>% 
  janitor::row_to_names(row_number = 1) %>% 
  rownames_to_column("CpG") %>% 
  as_tibble() %>% 
  filter(!row_number() %in% c(1, 2))

# Annotate CpGs
EPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b2.hg19) %>% 
  as.data.frame() %>% 
  dplyr::select(chr, pos, UCSC_RefGene_Group) %>% 
  dplyr::filter(rownames(.) %in% sig_cpgs) %>% 
  rownames_to_column("CpG")

#join the three data frames
CpG_table_top <- isolate_sig %>%
  left_join(EPIC, by='CpG') %>% 
  left_join(agreggated_cpgs, by='CpG') %>% 
  relocate(CpG, gene, chr, pos, UCSC_RefGene_Group, AA_control, `AA_ln-`, `AA_ln+`, EA_control, `EA_ln-`, `EA_ln+`, P.Value, adj.P.Val) %>% 
  na_if("") %>% 
  as_tibble()

# Write Top DMP Table 
write_csv(CpG_table_top, 
          file = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_significant_cpgs51_table.csv")

```

###############################################################################################
# Figure 1. EA LN+ DNA Methylomes Cluster with AA SLE (LN- & LN+) DNA Methylomes ##############
###############################################################################################

## A. Manhattan Plot
```{r}
manhattan_input <- DMP %>% dplyr::select(CpG, CHR, MAPINFO, gene, P.Value, adj.P.Val) %>% mutate(namer = paste0(CpG, " (", gene, ")"))
manhattan_input$namer <- case_when(grepl("\\(\\)$", manhattan_input$namer) ~ manhattan_input$CpG,
                                   TRUE ~ manhattan_input$namer)

manhattan_input$CHR <- as.numeric(as.character(manhattan_input$CHR))

don <- manhattan_input %>% 
  
  # Compute chromosome size
  group_by(CHR) %>% 
  summarise(chr_len=max(as.numeric(as.character(MAPINFO)))) %>% 
  
  # Calculate cumulative position of each chromosome
  mutate(tot=cumsum(as.numeric(as.character(chr_len)))-as.numeric(as.character(chr_len))) %>%
  dplyr::select(-chr_len) %>%
  
  # Add this info to the initial dataset
  left_join(manhattan_input, ., by=c("CHR"="CHR")) %>%
  
  # Add a cumulative position of each SNP
  arrange(CHR, MAPINFO) %>%
  mutate(BPcum=MAPINFO+tot)

don <- don %>% filter(!is.na(CHR))
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )

# filter dataframe to get data to be highligheted
highlight_0.1 <- don %>% 
             filter(adj.P.Val < 0.1 & adj.P.Val > 0.05)
highlight_0.05 <- don %>% 
             filter(adj.P.Val < 0.05)

# highlight those significant and are IFN
interferon_genes <- read_delim("data/ifn_genelist.txt", delim="\t")
highlight_0.05_ifn <- highlight_0.05 %>% filter(gene %in% interferon_genes$Symbol)

p1 <- ggplot(don, aes(x=BPcum, y=-log10(P.Value), label = namer)) +
    
    # Show all points
    geom_point(aes(color=as.factor(CHR)), alpha=0.8, size=1.3) +
    scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
    
    # Highlight Significant CpGs
    geom_point(data=highlight_0.1, aes(x=BPcum, y=-log10(P.Value)), color='#1E88E5', alpha=0.8, size=1.3) + #FDR<0.1
    geom_point(data=highlight_0.05, aes(x=BPcum, y=-log10(P.Value)), color='#FFC107', alpha=0.8, size=1.3) + #FDR<0.05
    geom_point(data=highlight_0.05_ifn, aes(x=BPcum, y=-log10(P.Value)), color='#D81B60', alpha=0.8, size=1.3) + #FDR<0.05 & interferon

    # Label Top Associated CpGs
    geom_text_repel(data = subset(don, P.Value <= 3.254483e-07), nudge_y=0.5, size = 3, point.padding = 0.1, max.overlaps = Inf, segment.size  = 0.1, segment.color = "grey50") + # label top 15
  
    # custom X axis:
    scale_x_continuous(label = axisdf$CHR, breaks = axisdf$center ) +
    scale_y_continuous(limits = c(0,10), breaks = seq(from=0,to=10,by=2) ) +     # remove space between plot area and x axis
    xlab("Autosomal Chromosome") +
  
    # Custom Suggesstive Lines
    geom_hline(yintercept=-log10(1.772525e-05), linetype="dashed", color = "blue") +
    geom_hline(yintercept=-log10(3.548031e-06), color = "red") + 
  
    # Custom the theme:
    theme_bw() +
    theme( 
      legend.position="none",
      panel.border = element_blank(),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank()
    )

ggsave(p1, filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/fig2a_manhattan.png", width = 3000, height = 1200, units = "px", dpi = 300)
```

## B. Heatmap
```{r}
# Isolate Significant CpGs ----
library(data.table)

DMP <- DMP %>% mutate(log10 = -log10(P.Value))
isolate_sig <- DMP %>% dplyr::select(CpG, gene, logFC, P.Value, adj.P.Val, log10) %>% filter(adj.P.Val<0.05)

sig_cpgs <- isolate_sig %>% pull("CpG")
genes <- isolate_sig %>% pull("gene")
# cat(paste0(unique(genes), collapse="\n"))

keep <- (rownames(normalized_betas_subset) %in% sig_cpgs)
DMP_beta_sig <- data.frame(normalized_betas_subset[keep, ])

# Identify CpGs that are 10% different between disease/control
combined_betas <- DMP_beta_sig %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="uab_id") %>% 
  setDT()

meta.dt <- meta %>% 
  setDT()

combined_data <- combined_betas[meta.dt, on = "uab_id", nomatch=0]

combined_data <- combined_data %>% setDF() %>% dplyr::relocate(uab_id, race, sex, age, disease, disease_subset, sel_score, slicc_index, acr_total_points, notes)

agreggated_cpgs <- combined_data %>% 
  group_by(disease) %>% 
  dplyr::summarise(across(11:61, mean))

agreggated_cpgs <- agreggated_cpgs %>% 
  dplyr::summarise(across(2:51, diff))

sig_cpgs <- agreggated_cpgs[1,which(abs(agreggated_cpgs)>=0.1)] %>% colnames()
keep <- (rownames(normalized_betas_subset) %in% sig_cpgs)
DMP_beta_sig <- data.frame(normalized_betas_subset[keep, ])

# Heatmap of Top Probes ----
library(ComplexHeatmap)
library(circlize)
library(viridis)

### Combine the meta data with significant methylation data 
combined_betas <- DMP_beta_sig %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="uab_id") %>% 
  setDT()

meta.dt <- meta %>% 
  setDT()

combined_data <- combined_betas[meta.dt, on = "uab_id", nomatch=0]

combined_data <- combined_data %>% setDF() %>% dplyr::relocate(uab_id, race, sex, age, disease, disease_subset, sel_score, slicc_index, acr_total_points, notes)

## Set ranges to SLEDAI
## Ranges based on https://www.sciencedirect.com/topics/medicine-and-dentistry/sledai#:~:text=Activity%20categories%20have%20been%20defined,activity%20(SLEDAI%E2%89%A520).
combined_data <- combined_data %>% 
  mutate(SLEDAI = case_when(
                            sel_score == 0 ~ 'No Activity (0)',
                            sel_score >= 1 & sel_score <= 5 ~ 'Mild Activity (1-5)',
                            sel_score >= 6 & sel_score <= 10 ~ 'Moderate Activity (6-10)',
                            sel_score >= 11 & sel_score <= 19 ~ 'High Activity (11-19)',
                            TRUE ~ "NA"      
                            )
        )

data_heatmap_mx <- combined_data %>% 
  dplyr::select(uab_id, disease, disease_subset, race, SLEDAI, c(sig_cpgs)) # isolate the top CpGs to reduce noise in heatmap

test_meta <- data_heatmap_mx %>%
  dplyr::select(race, disease_subset, uab_id, SLEDAI)

test_meta$disease_subset <- factor(test_meta$disease_subset, levels = c("control", "ln-", "ln+"))
test_meta$SLEDAI <- factor(test_meta$SLEDAI, levels = c("No Activity (0)", "Mild Activity (1-5)", "Moderate Activity (6-10)", "High Activity (11-19)", "NA"))

test_meta <- test_meta %>% 
  arrange(race, disease_subset)

# Define colors for each levels of qualitative variables
colors = list('race' = c("AA" = "#C04000", "EA" = "#56B4E9"),
              'disease_subset' = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"),
              'SLEDAI' = c("NA" = "#aaaaaa", "No Activity (0)" = "#440154FF", "Mild Activity (1-5)" = "#31688EFF", "Moderate Activity (6-10)" = "#35B779FF", "High Activity (11-19)" = "#f97a36"))

# beta_colors <- viridis::magma(n = 15, begin = 0, end = 1)
beta_colors <- colorRampPalette(c("#3d85c6", "#ffffff", "#cc0000"))(100)
# Create the heatmap annotation
ha <- HeatmapAnnotation(
  df = test_meta[,c(1:2, 4)],
  which = 'col',
  col = colors,
  show_legend = c("race" = TRUE, "disease_subset" = TRUE, "SLEDAI" = TRUE),
  annotation_label = c("Race", "Disease Subset", "SLEDAI"),
  annotation_legend_param = list(
    race = list(title = "Race",
                title_gp = gpar(fontsize = 16, fontface = "bold"), 
                labels_gp = gpar(fontsize = 16)), 
    disease_subset = list(title = "Disease Subset", 
                          labels = c("Control", "LN-", "LN+"),
                          title_gp = gpar(fontsize = 16, fontface = "bold"), 
                          labels_gp = gpar(fontsize = 16)),
    SLEDAI = list(title = "SLEDAI", 
                          labels = c("No Activity (0)", "Mild Activity (1-5)", "Moderate Activity (6-10)", "High Activity (11-19)", "NA"),
                          title_gp = gpar(fontsize = 16, fontface = "bold"), 
                          labels_gp = gpar(fontsize = 16))),
  annotation_height = 1:3, height = unit(8, "cm"))

data_heatmap_mx <- data.frame(t(data_heatmap_mx))
colnames(data_heatmap_mx) <- data_heatmap_mx["uab_id",]
data_heatmap_mx_1 <- data_heatmap_mx[-c(1:5),] %>% as.matrix()

data_heatmap_mx <- matrix(as.numeric(data_heatmap_mx_1), ncol = ncol(data_heatmap_mx_1))
rownames(data_heatmap_mx) <- rownames(data_heatmap_mx_1); colnames(data_heatmap_mx) <- colnames(data_heatmap_mx_1)

data_heatmap_mx <- data_heatmap_mx[,match(test_meta$uab_id, colnames(data_heatmap_mx))]

# rename rowname to have gene name
data_heatmap_mx_named <- data_heatmap_mx

rownames(data_heatmap_mx_named) <- paste0(rownames(data_heatmap_mx), " - ", probe.features$gene[match(rownames(data_heatmap_mx), probe.features$CpG)])

# Combine the heatmap and the annotation
p1 <- Heatmap(data_heatmap_mx_named, 
              name = "Beta Value",
              col = beta_colors,
              top_annotation = ha,
              row_names_max_width = unit(16, "cm"),
              cluster_rows = TRUE, 
              cluster_columns = TRUE, 
              show_column_names = FALSE, 
              show_row_names = TRUE, 
              row_gap = c(1),
              heatmap_legend_param = list(
                legend_direction = "horizontal",
                legend_width = unit(12, "cm"),
                title_gp = gpar(fontsize = 20, 
                            fontface = "bold"), 
                labels_gp = gpar(fontsize = 20)
              ))

png("fig2_top_cpgs_heatmap.png", width = 14, height = 8, units = 'in', res = 400)
  draw(p1, heatmap_legend_side="bottom", annotation_legend_side="right", legend_grouping = "original", padding = unit(c(2, 2, 2, 20), "mm"))
dev.off()
```

## C. MDS Plot
```{r}
# MDS of Significant CpGs
library(ggforce)

# Create MDS Plot to cluster samples
d <- dist(t(data_heatmap_mx_named))
fit <- cmdscale(d, eig = TRUE, k = 2)
x <- fit$points[, 1]
y <- fit$points[, 2]

mds <- cbind(x, y) %>% 
  as.data.frame() %>% 
  rownames_to_column(var = "uab_id")

mds <- left_join(meta.dt, mds, by="uab_id") %>% 
  dplyr::filter(!is.na(x))

mds$emph <- NA
mds$emph[which(mds$race == "AA" & mds$disease_subset == "ln+")] <- "yes"
mds$emph[which(mds$race == "EA" & mds$disease_subset == "ln+")] <- "yes"

mds$emph <- mds$emph %>% 
  replace_na("no")

#changing alpha of controls to reveal cases
alpha <- ifelse(test = (mds$disease_subset == "control"), 0.1, 0.9)

mds %>% 
  ggplot(aes(x = x, y=y)) + 
  # geom_mark_ellipse(aes(filter = emph == "yes", fill = emph), show.legend = FALSE) +
  geom_point(size=7, aes(color=disease_subset, shape = race, alpha=alpha), stroke = 2) +
  scale_shape_manual(values=c(2, 16)) +
  scale_fill_manual(values=c("#dddddd")) +
  scale_alpha_continuous(limits=c(0,1), guide="none") +
  guides(colour=guide_legend(override.aes=list(shape=15))) +
  # ggtitle("MDS Plot (Top SLE-Associated CpGs)") +
  labs(color="Subset", shape="Race", x="MDS 1", y="MDS 2") +
  scale_color_manual(values = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"), labels = c("Control", "LN-", "LN+")) +
  theme(panel.background = element_rect(fill = "white", colour = "grey50"),
        plot.title = element_text(hjust = 0.5),
        text = element_text(size=20))

ggsave(filename = "fig2_mds_topCpGs.png",
       width = 8.6, height = 7.64, units = "in", dpi = 400)
```

###############################################################################################
# Figure 2. Methylation Module Score using Top Associated IFN CpGs ######################
###############################################################################################

## Identify CpGs that are differentially methylated >=10% between Case/Control
```{r}
# Identify CpGs that are 10% different between disease/control
combined_betas <- DMP_beta_sig %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="uab_id") %>% 
  setDT()

meta.dt <- meta %>% 
  setDT()

combined_data <- combined_betas[meta.dt, on = "uab_id", nomatch=0]

combined_data <- combined_data %>% setDF() %>% dplyr::relocate(uab_id, race, sex, age, disease, disease_subset, sel_score, slicc_index, acr_total_points, notes)

agreggated_cpgs <- combined_data %>% 
  group_by(disease) %>% 
  dplyr::summarise(across(11:61, mean))

agreggated_cpgs <- agreggated_cpgs %>% 
  dplyr::summarise(across(2:51, diff))

sig_cpgs <- agreggated_cpgs[1,which(abs(agreggated_cpgs)>=0.1)] %>% colnames()

keep <- (rownames(normalized_betas_subset) %in% sig_cpgs)
DMP_beta_sig <- data.frame(normalized_betas_subset[keep, ])

probe.features[probe.features$CpG %in% sig_cpgs,] %>% pull("gene") # ALL are ifn-related
```

## Boxplot of IFN CpG Methylation Score
```{r}
## Plot Box Plot of IFN Methylation Score ----
library(ggrepel)
library(ggpubr)
give.n <- function(x){return(c(y = -2.5, label = length(x)))} # function to give numbers

methylation_data <- DMP_beta_sig %>% t() %>% as.data.frame() 

metadata <- meta.dt[match(rownames(methylation_data), meta.dt$uab_id),]
all(rownames(methylation_data) == metadata$uab_id)

methylation_zscore <- sapply(methylation_data, function(x) (x-median(x, na.rm=T))/sd(x, na.rm=T))
rownames(methylation_zscore) <- rownames(methylation_data)

methylation_zscore <- methylation_zscore %>% as.data.frame() %>% rownames_to_column(var="uab_id")
methylation_zscore <- left_join(metadata, methylation_zscore, by="uab_id")

methylation_zscore$module_score <- apply((methylation_zscore %>% dplyr::select(sig_cpgs)), 1, median, na.rm=T)

## Create Separator
methylation_zscore <- methylation_zscore %>% 
  unite(race, disease_subset,
        col = "separator",
        sep = "_",
        remove = FALSE)

methylation_zscore %>%
  ggplot(., aes(x = factor(x = separator, levels=c("AA_control", "AA_ln-", "AA_ln+", "EA_control", "EA_ln-", "EA_ln+")), 
                y = module_score, 
                fill=factor(disease_subset, levels = c("control", "ln-", "ln+")))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2) +
  # ggtitle("Methylation Score (MethylationEPIC Microarray)") +
  labs(x="", y="SLE Methylation Score", fill="Subset") +
  scale_x_discrete(labels=c("AA_control" = "AA Control", "AA_ln-" = "AA LN-", "AA_ln+" = "AA LN+", 
                            "EA_control" = "EA Control", "EA_ln-" = "EA LN-", "EA_ln+" = "EA LN+")) +
  scale_fill_manual(values = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"),
                    labels = c("Control", "LN-", "LN+")) +
  theme_classic() +
  theme(panel.background = element_blank(),
        text = element_text(size = 25), 
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none") +
  stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
  stat_compare_means(comparisons = list(c("AA_control", "AA_ln-"), c("AA_control", "AA_ln+"), c("AA_ln-", "AA_ln+"),
                                        c("EA_control", "EA_ln-"), c("EA_control", "EA_ln+"), c("EA_ln-", "EA_ln+"),
                                        c("AA_control", "EA_control"), c("AA_ln-", "EA_ln-"), c("AA_ln+", "EA_ln+")), size = 7, label = "p.signif")

ggsave(filename = "/cluster/home/pcallen/tmp_analysis/uab_sle_methylation_ancestry_study/fig3_methylationepic_methylScore_boxplot_median.png", 
       width = 17.136, height=10.5, units = "in", dpi = 400)
```

###############################################################################################
# Figure 3. Altered methylation of MX1, IFITM1, and USP18 loci is validated by MS-qPCR  #######
###############################################################################################

## A. Browser Tracks for MX1, USP18, IFITM1
```{r}
library(GenomicRanges)
library(plotgardener)

# CpG Content
library(AnnotationHub)
hub <- AnnotationHub()
query(hub, c("cpg","hg19"))

cpgs <- hub[["AH5086"]]

# CpG Content
mx1_gene <- GRanges(seqnames="chr21",
          ranges=IRanges(start = 42791947, end = 42841998))

mx1_cpgs <- subsetByOverlaps(cpgs, mx1_gene)

# MX1 ----

pageCreate(
    width = 8.25, height = 5.25, default.units = "inches",
    showGuides = FALSE, xgrid = 0, ygrid = 0
)

#title
plotText(
    label = "MX1 (cg21549285)", fontsize = 18, fontface = "bold",
    x = 4.5, y = 0.5, just = "center", default.units = "inches"
)

#chromosome number
plotText(
    label = "Chr 21", fontsize = 14,
    x = 1, y = 1, just = "center", default.units = "inches"
)

ideogramPlot <- plotIdeogram(
    chrom = "chr21", assembly = "hg19",
    orientation = "h",
    x = 1.5, y = 1, width = 5.75, height = 0.3, just = "left"
)

region <- pgParams(chrom = "chr21", chromstart = 42791947, chromend = 42841998) #region of chromosome to highlight
annoHighlight(
    plot = ideogramPlot, params = region,
    fill = "red",
    y = 0.7, height = 0.6, just = c("left", "top"), default.units = "inches")
    
annoZoomLines(
    plot = ideogramPlot, params = region,
    y0 = 1.3, x1 = c(1.5, 7.25), y1 = 1.6, default.units = "inches")

geneHighlights <- data.frame("geneName" = "MX1", "color" = "steel blue")
genePlot <- plotGenes(
    chrom = "chr21", chromstart = 42791947, chromend = 42841998,
    assembly = "hg19",
    x = 1.5, y = 1.65, width = 5.75, height = 1)

plotRanges(mx1_cpgs, chrom = "chr21", chromstart = 42791947, chromend = 42841998, assembly = "hg19", x=1.5, y=1.65, width = 5.75, height = 1, fill="#FFA500")

#highlight region where MX1 CpG lies
region <- pgParams(chrom = "chr21", chromstart = 42799141, chromend = 42799161) #region of gene to highlight
annoHighlight(
    plot = genePlot, params = region,
    fill = "red", alpha=1,
    y = 1.65, height = 1, just = c("left", "top"), default.units = "inches")

annoGenomeLabel(
    plot = genePlot, scale = "Kb",
    x = 1.5, y = 3)


legendPlot <- plotLegend(
    legend = c("CpG Island"),
    fill = c("#FFA500"),
    border = TRUE,
    x = 7.5, y = 2.5, width = 1.25, height = 0.25,
    just = c("left", "top"),
    default.units = "inches")

# IFITM1 ----
# CpG Content
ifitm1_gene <- GRanges(seqnames="chr11",
          ranges=IRanges(start = 307631, end = 315272))

ifitm1_cpgs <- subsetByOverlaps(cpgs, ifitm1_gene)

pageCreate(
    width = 8.25, height = 5.25, default.units = "inches",
    showGuides = FALSE, xgrid = 0, ygrid = 0
)

#title
plotText(
    label = "IFITM1 (cg23570810)", fontsize = 18, fontface = "bold",
    x = 4.5, y = 0.5, just = "center", default.units = "inches"
)

#chromosome number
plotText(
    label = "Chr 11", fontsize = 14,
    x = 1, y = 1, just = "center", default.units = "inches"
)

ideogramPlot <- plotIdeogram(
    chrom = "chr11", assembly = "hg19",
    orientation = "h",
    x = 1.5, y = 1, width = 5.75, height = 0.3, just = "left"
)

region <- pgParams(chrom = "chr11", chromstart = 307631, chromend = 360272) #region of chromosome to highlight
annoHighlight(
    plot = ideogramPlot, params = region,
    fill = "red",
    y = 0.7, height = 0.6, just = c("left", "top"), default.units = "inches", alpha = 1)
    
annoZoomLines(
    plot = ideogramPlot, params = region,
    y0 = 1.3, x1 = c(1.5, 7.25), y1 = 1.6, default.units = "inches")

geneHighlights <- data.frame("geneName" = "IFITM1", "color" = "steel blue")
genePlot <- plotGenes(
    chrom = "chr11", chromstart = 307631, chromend = 315272,
    assembly = "hg19",
    x = 1.5, y = 1.65, width = 5.75, height = 1)

plotRanges(ifitm1_cpgs, chrom = "chr11", chromstart = 307631, chromend = 315272, assembly = "hg19", x=1.5, y=1.65, width = 5.75, height = 1, fill="#FFA500")

#highlight region where IFITM1 CpG lies
region <- pgParams(chrom = "chr11", chromstart = 315102, chromend = 315122) #region of gene to highlight
annoHighlight(
    plot = genePlot, params = region,
    fill = "red", alpha=1,
    y = 1.65, height = 1, just = c("left", "top"), default.units = "inches")

annoGenomeLabel(
    plot = genePlot, scale = "Kb",
    x = 1.5, y = 3)


legendPlot <- plotLegend(
    legend = c("CpG Island"),
    fill = c("#FFA500"),
    border = TRUE,
    x = 7.5, y = 2.5, width = 1.25, height = 0.25,
    just = c("left", "top"),
    default.units = "inches")


# USP18 ----
# CpG Content
usp18_gene <- GRanges(seqnames="chr22",
          ranges=IRanges(start = 18632666, end = 18660164))

usp18_cpgs <- subsetByOverlaps(cpgs, usp18_gene)

pageCreate(
    width = 8.25, height = 5.25, default.units = "inches",
    showGuides = FALSE, xgrid = 0, ygrid = 0
)

#title
plotText(
    label = "USP18 (cg14293575)", fontsize = 18, fontface = "bold",
    x = 4.5, y = 0.5, just = "center", default.units = "inches"
)

#chromosome number
plotText(
    label = "Chr 22", fontsize = 14,
    x = 1, y = 1, just = "center", default.units = "inches"
)

ideogramPlot <- plotIdeogram(
    chrom = "chr22", assembly = "hg19",
    orientation = "h",
    x = 1.5, y = 1, width = 5.75, height = 0.3, just = "left"
)

region <- pgParams(chrom = "chr22", chromstart = 18632666, chromend = 18660164) #region of chromosome to highlight
annoHighlight(
    plot = ideogramPlot, params = region,
    fill = "red",
    y = 0.7, height = 0.6, just = c("left", "top"), default.units = "inches", alpha = 1)
    
annoZoomLines(
    plot = ideogramPlot, params = region,
    y0 = 1.3, x1 = c(1.5, 7.25), y1 = 1.6, default.units = "inches")

geneHighlights <- data.frame("geneName" = "USP18", "color" = "steel blue")
genePlot <- plotGenes(
    chrom = "chr22", chromstart = 18632666, chromend = 18660164,
    assembly = "hg19",
    x = 1.5, y = 1.65, width = 5.75, height = 1)

plotRanges(usp18_cpgs, chrom = "chr22", chromstart = 18632666, chromend = 18660164, assembly = "hg19", x=1.5, y=1.65, width = 5.75, height = 1, fill="#FFA500")

#highlight region where IFITM1 CpG lies
region <- pgParams(chrom = "chr22", chromstart = 18635460, chromend = 18635480) #region of gene to highlight
annoHighlight(
    plot = genePlot, params = region,
    fill = "red", alpha=1,
    y = 1.65, height = 1, just = c("left", "top"), default.units = "inches")

annoGenomeLabel(
    plot = genePlot, scale = "Kb",
    x = 1.5, y = 3)


legendPlot <- plotLegend(
    legend = c("CpG Island"),
    fill = c("#FFA500"),
    border = TRUE,
    x = 7.5, y = 2.5, width = 1.25, height = 0.25,
    just = c("left", "top"),
    default.units = "inches")
```

## B. Methylight Methylation Score
```{r}
# Fig 4 -- Methylight Methylation Score ----
# Load Libraries
library(readxl)
library(tidyverse)
library(janitor)
library(ggpubr)
library(data.table)

setwd("/cluster/home/pcallen/projects/uab_sle_96/methylationEpic/")

# MethyLight -- Loading IFITM1_U ----
probe <- "data/raw/20211208_methylight_ifitm1_u.xlsx"


probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- probe %>% 
  dplyr::filter(!target == "MYOD1")  %>% 
  dplyr::select(target) %>% 
  unique() %>% 
  as.character() %>% gsub(" ", "_", .) %>% 
  tolower(.)

# Formatting the Assay name for downstream readibility
probe$target <- gsub(" ", "_", probe$target) %>% 
  tolower(.)

probe$cq <- as.numeric(probe$cq)

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

# probe <- probe[which(!(is.na(cq) | amp_status == "Inconclusive")),]

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- probe

# MethyLight -- Loading IFITM1_m  ----

probe <- "data/raw/20211207_methylight_ifitm1_m.xlsx"

probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- "ifitm1_m"

# Formatting the Assay name for downstream readibility
probe$target <- gsub("IFITM1 Methylated", "ifitm1_m", probe$target) %>% 
  tolower(.)

probe$cq <- as.numeric(probe$cq)
probe$cq_mean <- ifelse(!is.na(probe$cq_mean), as.numeric(probe$cq_mean), as.numeric(probe$cq))

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- merge(methylight_assays, probe[,c(1, 3:5)], by="well", all.x = T)

# MethyLight -- Loading USP18_U ----
probe <- "data/raw/20211207_methylight_usp18_u.xlsx"

probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- probe %>% 
  dplyr::filter(!target == "MYOD1")  %>% 
  dplyr::select(target) %>% 
  unique() %>% 
  as.character() %>% gsub(" ", "_", .) %>% 
  tolower(.)

# Formatting the Assay name for downstream readibility
probe$target <- gsub(" ", "_", probe$target) %>% 
  tolower(.)

probe$cq <- as.numeric(probe$cq)

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

# probe <- probe[which(!(is.na(cq) | amp_status == "Inconclusive")),]

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- merge(methylight_assays, probe[,c(1, 3:5)], by="well", all.x = T)

# MethyLight -- Loading USP18_m  ----

probe <- "data/raw/20211207_methylight_usp18_m.xlsx"

probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- probe %>% 
  dplyr::filter(!target == "MYOD1")  %>% 
  dplyr::select(target) %>% 
  unique() %>% 
  as.character() %>% gsub(" ", "_", .) %>% 
  tolower(.)
# Formatting the Assay name for downstream readibility
probe$target <- gsub(" ", "_", probe$target) %>% 
  tolower(.)


probe$cq <- as.numeric(probe$cq)
probe$cq_mean <- ifelse(!is.na(probe$cq_mean), as.numeric(probe$cq_mean), as.numeric(probe$cq))

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- merge(methylight_assays, probe[,c(1, 3:5)], by="well", all.x = T)

# MethyLight -- Loading MX1_m ----

probe <- "data/raw/20211116_methylight_mx1_m.xlsx"

probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- "mx1_m"

# Formatting the Assay name for downstream readibility
probe$target <- gsub("MX1 Methylated", "mx1_m", probe$target) %>% 
  tolower(.)

probe$cq <- as.numeric(probe$cq)
probe$cq_mean <- ifelse(!is.na(probe$cq_mean), as.numeric(probe$cq_mean), as.numeric(probe$cq))

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- merge(methylight_assays, probe[,c(1, 3:5)], by="well", all.x = T)

# MethyLight -- Loading MX1_u ----
probe <- "data/raw/20211118_methylight_mx1_u.xlsx"

probe <- read_excel(probe, 
                    skip = 23) %>% clean_names()

assay <- "mx1_u"

# Formatting the Assay name for downstream readibility
probe$target <- gsub("MX1 Unmethylated", "mx1_u", probe$target) %>% 
  tolower(.)

probe$cq <- as.numeric(probe$cq)
probe$cq_mean <- ifelse(!is.na(probe$cq_mean), as.numeric(probe$cq_mean), as.numeric(probe$cq))

# Filter out failed samples + Negative Control
NAs <- probe %>% filter(is.na(cq))

probe <- probe %>% dplyr::select(well_position, sample, target, amp_status, cq, cq_sd)

# Separating the assay from the input control and joining
wells <- as_tibble(probe)

myod1_wells <- wells %>% 
  filter(target == "myod1")

probe_wells <- wells %>% 
  filter(!target == "myod1")

probe <- left_join(probe_wells, myod1_wells, by  = "well_position", suffix = c("_assay", "_myod1"))

rm(myod1_wells, probe_wells, wells)

# Calulating PMR
probe$pmr <- probe$cq_assay/probe$cq_myod1

sds <- probe %>% group_by(sample_assay) %>% summarize(pmr_sd=sd(pmr, na.rm = TRUE), pmr_median = median(pmr, na.rm = TRUE))

probe <- right_join(probe, sds, by="sample_assay", all.x=TRUE)

probe <- probe %>% dplyr::select(well_position, sample_assay, pmr, pmr_sd, pmr_median)

colnames(probe) <- c("well", "sample", paste0("pmr_", assay), paste0("pmr_sd_", assay), paste0("pmr_median_", assay))

methylight_assays <- merge(methylight_assays, probe[,c(1, 3:5)], by="well", all.x = T)

# Adding Metadata ----
metadata <- read_csv("data/processed/phenotypes_updated.csv") %>% dplyr::select(uab_id, race, disease, disease_subset, age)

methylight_assays <- left_join(metadata, methylight_assays, by="sample")

methylight_assays <- methylight_assays %>% 
  distinct(uab_id, .keep_all = TRUE) %>% 
  dplyr::select(c(colnames(.)[1:7], contains("median")))

methylight_assays <- methylight_assays %>% 
  column_to_rownames(var = "uab_id")

# Calculate Z-score for Methylight 
methylight_assays_pmr <- methylight_assays %>% 
  dplyr::select(contains("median"))

metadata <- metadata[match(rownames(methylight_assays_pmr), metadata$uab_id),]
all(rownames(methylation_data) == metadata$uab_id)

methylight_zscore <- sapply(methylight_assays_pmr, function(x) (x-median(x, na.rm=T))/sd(x, na.rm=T))
rownames(methylight_zscore) <- rownames(methylight_assays_pmr)

methylight_zscore <- methylight_zscore %>%
  as.data.frame() %>% 
  mutate(pmr_median_mx1_m = pmr_median_mx1_m * -1,
         pmr_median_ifitm1_m = pmr_median_ifitm1_m * -1,
         pmr_median_usp18_m = pmr_median_usp18_m * -1)

methylight_zscore <- methylight_zscore %>% as.data.frame() %>% rownames_to_column(var="uab_id")
methylight_zscore <- left_join(metadata, methylight_zscore, by="uab_id")

methylight_zscore <- methylight_zscore  %>% 
  rowwise() %>% 
  mutate(methylight_score = median(c(pmr_median_ifitm1_u, pmr_median_ifitm1_m, pmr_median_mx1_m, pmr_median_mx1_u, pmr_median_usp18_m, pmr_median_usp18_u)))

methylight_zscore <- methylight_zscore %>% 
  unite(race, disease_subset,
        col = "separator",
        sep = "_",
        remove = FALSE)

## Plot Methylight score 
p1 <- methylight_zscore %>% 
  ggplot(., aes(x = factor(x = separator, levels=c("AA_control", "AA_ln-", "AA_ln+", "EA_control", "EA_ln-", "EA_ln+")), 
                y = methylight_score, 
                fill=factor(disease_subset, levels = c("control", "ln-", "ln+")))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2) +
  # ggtitle("Methylation Score (Methylight Assays)") +
  labs(x="", y="SLE qPCR Score", fill="Subset") +
  scale_x_discrete(labels=c("AA_control" = "AA Control", "AA_ln-" = "AA LN-", "AA_ln+" = "AA LN+", 
                            "EA_control" = "EA Control", "EA_ln-" = "EA LN-", "EA_ln+" = "EA LN+")) +
  scale_fill_manual(values = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"),
                    labels = c("Control", "LN-", "LN+")) +
  theme_classic() +
  theme(panel.background = element_blank(),
        text = element_text(size = 25), 
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none") +
  stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
  stat_compare_means(comparisons = list(c("AA_control", "AA_ln-"), c("AA_control", "AA_ln+"), c("AA_ln-", "AA_ln+"),
                                        c("EA_control", "EA_ln-"), c("EA_control", "EA_ln+"), c("EA_ln-", "EA_ln+"),
                                        c("AA_control", "EA_control"), c("AA_ln-", "EA_ln-"), c("AA_ln+", "EA_ln+")), size = 7, label = "p.signif")

ggsave(p1, filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/fig4_methylight_methylScore_boxplot_median.png",
       width = 13.078, height=6.344, units = "in", dpi = 300)
```

## C/D. Correlation between Methylation Scores from MethyLight and MethylationEPIC Microarray
```{r}
## Correlation between Methylation Scores from MethyLight and MethylationEPIC Microarray ---------------
combined <- left_join(methylation_zscore, (methylight_zscore %>% dplyr::select(uab_id, methylight_score)), by="uab_id")
  
colnames(combined)[which(colnames(combined) == "module_score")] <- "methylation_beta_zscore"

cor(combined$methylight_score, combined$methylation_beta_zscore, use = "complete.obs") # 0.8600045

## Correlation Plot between Methylation Scores
ggscatter(combined, 
          x="methylight_score", 
          y = "methylation_beta_zscore", 
          color="disease_subset", 
          shape ="race", 
          palette = c("red", "darkgreen", "blue"),
          add = "reg.line", add.params = list(color = "#56B4E9", fill = "lightblue"), # Customize reg. line
          conf.int = TRUE) +
  scale_shape_manual(values=c(2, 16)) +
  scale_color_manual(values = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"),
                    labels = c("Control", "LN-", "LN+")) +
  stat_cor(method = "spearman", label.x.npc="left", label.y.npc="top") +
  # ggtitle("Methylation Correlation Plot") +
  labs(x="Methylation Score [MethyLight Z-Score]", y="Methylation Score [Beta Z-Score]", color = "Disease Subset") +
  theme(plot.title = element_text(hjust = 0.5))

ggsave("~/tmp_analysis/uab_sle_methylation_ancestry_study/fig4_microarray_methylight_correlation.png",
       width = 6.539, height=3.172, units = "in", dpi=300)
### By Race 
ggscatter(combined, 
          x="methylight_score", 
          y = "methylation_beta_zscore", 
          color="disease_subset", 
          palette = c("red", "darkgreen", "blue"),
          add = "reg.line", add.params = list(color = "#56B4E9", fill = "lightblue"), # Customize reg. line
          conf.int = TRUE) +
  scale_shape_manual(values=c(2, 16)) +
  scale_color_manual(values = c("control" = "#009E73", "ln-" = "#FFDB58", "ln+" = "#CC79A7"),
                    labels = c("Control", "LN-", "LN+")) +
  stat_cor(method = "spearman", label.x.npc="left", label.y.npc="top") +
  # ggtitle("Methylation Correlation Plot") +
  labs(x="Methylation Score [MethyLight Z-Score]", y="Methylation Score [Beta Z-Score]", color = "Disease Subset") +
  theme(plot.title = element_text(hjust = 0.5)) +  
  facet_wrap(~race)

ggsave("~/tmp_analysis/uab_sle_methylation_ancestry_study/fig4_microarray_methylight_correlation_race.png",
       width = 7.8468, height=3.8064, units = "in", dpi=300)
```

##################################################
# Figure 4. Local Ancestry Analysis ##############
##################################################

## Combine MSP files
```{r concatenate msp.tsv}
library(readr)
library(data.table)
library(plyr)
library(tidyverse)

#Load all local ancestry calls
dir <- "/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster"

for (i in c(1:22))
{
	assign(paste("chr_", i, sep=""), fread(paste(dir, "/chr", i, ".results.msp.tsv", sep=""), data.table=F))
}

#parse the text list of data frame names as a list of data frames
data_list <- eval(
  parse(text=paste(
    "list(", paste(
      paste(
        paste("chr", "_", c(1:22), sep="")
      ), collapse=','
    ), ")"
  ))
)

#Stack all ancestry calls together using rbind.fill
all_msp <- rbind.fill(data_list)

write_delim(all_msp, file = paste0(dir, "/ALL.results.msp.tsv"), delim = "\t", col_names = T, quote = "none")
```

## Generate karyograms for each sample
```{r making karyogram}
# Karyotype - Local Ancestry
library(karyoploteR)
library(readr)
library(tidyverse)

# Subpopulation order/codes: AFR=0       EAS=1   EUR=2 -- "AA" = "#C04000", "EA" = "#56B4E9" (Heatmap)

uab_sle_local_ancestry <- read_delim("/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster/ALL.FORMATTED.results.msp.tsv",
                                     delim = "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)

uab_sle_local_ancestry <- uab_sle_local_ancestry %>% 
  rename(chr=`#chm`,
         start=spos,
         end=epos)

## Isolate Samples ----
samples <- gsub("\\.0", "", gsub("\\.1", "", colnames(uab_sle_local_ancestry)[grep("UAB", colnames(uab_sle_local_ancestry))] )) %>% unique()

## Karyogram each Sample ----
for (sample in samples){
  cat("\n", paste("Currently working on sample:", sample,"(", which(samples == sample), "/", length(samples), ")"))
  subset <- {}
  subset <- uab_sle_local_ancestry %>% 
    select(1:3, contains(sample)) %>% 
    mutate_at(c(4:5), as.character) %>% 
    mutate(across(contains(sample), str_replace, '0', "#C04000")) %>% 
    mutate(across(contains(sample), str_replace, '1', "green")) %>% 
    mutate(across(contains(sample), str_replace, '2', "#56B4E9"))
  kp <- {}
  
  pb = txtProgressBar(min = 0, max = nrow(subset), initial = 0, style = 3)
  
  png(paste0("/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/karyotypes/", sample, "_karyogram.png"), units="in", width=8, height=6, res=400)
  kp <- plotKaryotype(plot.type=2, chromosomes = "autosomal")

  ## Paint Local Ancestry
  for (i in seq(nrow(subset))){
    setTxtProgressBar(pb,i)
    kpRect(kp, chr=paste0("chr",subset$chr[i]), x0=subset$start[i], x1=subset$end[i], y0=0, y1=0.9, data.panel = 1, col=as.character(subset[i,4]), border=NA)
    kpRect(kp, chr=paste0("chr",subset$chr[i]), x0=subset$start[i], x1=subset$end[i], y0=0, y1=0.9, data.panel = 2, col=as.character(subset[i,5]), border=NA)
    close(pb)
  }
  legend(x = "bottomright", fill = c("#C04000", "green", "#56B4E9"), legend = c("AFR", "EAS", "EUR"))
  dev.off()
}

# Format Global Ancestry Files ----
test <- readr::read_delim(file= "/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster/chr10.results.rfmix.Q", delim="\t", skip=1)

colnames(test)[1] <- "sample"

test <- test %>% 
  pivot_longer(!sample, names_to = "ancestry", values_to = "proportion")

test$chr <- paste0("chr", 1)

test <- test %>% relocate(chr, .before = 2)

# Load all local ancestry Proportions
dir <- "/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster"

for (i in c(1:22))
{
  ancestry_proportion <- readr::read_delim(file= paste0("/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster/chr", i, ".results.rfmix.Q"), delim="\t", skip=1)

  colnames(ancestry_proportion)[1] <- "sample"
  
  ancestry_proportion <- ancestry_proportion %>% 
    pivot_longer(!sample, names_to = "ancestry", values_to = "proportion")
  
  ancestry_proportion$chr <- paste0("chr", i)
  
  ancestry_proportion <- ancestry_proportion %>% relocate(chr, .before = 2)
  
  assign(paste("chr_", i, sep=""), ancestry_proportion)

}

#parse the text list of data frame names as a list of data frames
data_list <- eval(
  parse(text=paste(
    "list(", paste(
      paste(
        paste("chr", "_", c(1:22), sep="")
      ), collapse=','
    ), ")"
  ))
)

#Stack all ancestry calls together using rbind.fill
all_proportions_chr <- plyr::rbind.fill(data_list)

all_proportions_sample <- all_proportions_chr %>% group_by(sample, ancestry) %>% 
  summarise(ancestry_proportion=mean(proportion))

afr_proportion <- all_proportions_sample %>% 
  filter(ancestry == "AFR")

# Name those within the different ranges ----
afr_proportion %>% filter(ancestry_proportion<0.2) %>% arrange(desc(ancestry_proportion)) # 0-25% -- UAB5023 (0.0156)

afr_proportion %>% filter(ancestry_proportion>0.2 & ancestry_proportion<0.4) %>% arrange(desc(ancestry_proportion)) # 20-40% -- NONE

afr_proportion %>% filter(ancestry_proportion>0.4 & ancestry_proportion<0.6) %>% arrange(desc(ancestry_proportion)) # 40-60% -- P3UAB0080 (0.548)

afr_proportion %>% filter(ancestry_proportion>0.8) %>% arrange(ancestry_proportion) # 80+% -- P3UAB0084 (0.904) & UAB5044 (0.807)

write_csv(afr_proportion, file = "20230214_afr_proportions.csv")
```

## Isolate ROI and associated Ancestry
```{r}
## Local Ancestry ----
# isolate granges that contain the significant CpGs

probe.features$end <- probe.features$MAPINFO + 5
ifn.granges <- probe.features %>% 
  dplyr::select(CpG, CHR, MAPINFO, end, gene) %>% 
  dplyr::filter(CpG %in% c(rownames(DMP_beta_sig), "cg14293575"))

ifn.granges$CHR <- as.numeric(ifn.granges$CHR)
ifn.granges$MAPINFO <- as.numeric(ifn.granges$MAPINFO)
ifn.granges$end <- as.numeric(ifn.granges$end)

ifn.granges <- makeGRangesFromDataFrame(ifn.granges,
                                        seqnames.field = "CHR",
                                        start.field = "MAPINFO",
                                        end.field = "end",
                                        keep.extra.columns=T)

# Loading Ancestry Data
ancestry_data <- read_delim("/cluster/home/pcallen/projects/uab_sle_96/genotyping/local_ancestry_plink/rfmix_output_cluster/ALL.FORMATTED.results.msp.tsv",
                                     delim = "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)

# Set EAS to NA
## Split Ancestry
ancestry_data_meta <- ancestry_data[,1:6]
ancestry_data_values <- ancestry_data[,7:ncol(ancestry_data)]

ancestry_data_values[ancestry_data_values == 1] <- NA
ancestry_data <- cbind(ancestry_data_meta, ancestry_data_values)
rm(ancestry_data_meta, ancestry_data_values)

## Combining 0/1 ancestry values

#take out the missing sample
names <- gsub("\\.0", "", 
         gsub("\\.1", "", colnames(ancestry_data)[7:ncol(ancestry_data)])) %>% unique()

phenotypes_updated <- meta %>% 
  filter(uab_id %in% names)

for(i in 1:nrow(phenotypes_updated)){
ancestry_data[paste(phenotypes_updated$uab_id[i])] <- ifelse(((ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] == 0 | ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))] == 0) & ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] == ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))]), 0,
                         ifelse(((ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] == 0 | ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))] == 0) & ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] != ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))]), 1,
                              ifelse(((ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] == 2 | ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))] == 2) & ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".0"))] == ancestry_data[noquote(paste0(phenotypes_updated$uab_id[i], ".1"))]), 2, "ERROR"))) 
}

ancestry_data[grepl(c("\\.0|\\.1"), colnames(ancestry_data))] <- NULL

ancestry_data$region <- paste0("chr", ancestry_data$`#chm`, "_", ancestry_data$spos, "_", ancestry_data$epos)

ancestry_data <- ancestry_data %>% 
  relocate(region)

ancestry.granges <- makeGRangesFromDataFrame(ancestry_data[,1:4],
                                             seqnames.field = "#chm",
                                             start.field = "spos",
                                             end.field = "epos",
                                             keep.extra.columns = TRUE)

# Intersect the ancestry granges with the ifn granges
library(plyranges)

intersect <- join_overlap_inner(ancestry.granges, ifn.granges) %>% 
  as.data.frame()

ancestry_data.ifn <- ancestry_data[match(intersect$region, ancestry_data$region),]
all(ancestry_data.ifn$region == intersect$region)

ancestry_data.ifn <- cbind(ancestry_data.ifn, intersect[,c("CpG", "gene")]) %>% relocate(CpG, gene)

rownames(ancestry_data.ifn) <- paste0(ancestry_data.ifn$CpG,"_ancestry")
ancestry_data.ifn <- ancestry_data.ifn[,-c(1:9)]

ancestry_data.ifn <- ancestry_data.ifn %>% t() %>% 
  as.data.frame() %>% mutate(uab_id = rownames(.))

ancestry_data.ifn[ancestry_data.ifn == "0"] <- "Homozygous_Afr"
ancestry_data.ifn[ancestry_data.ifn == "1"] <- "Hetero_Afr_Eur"
ancestry_data.ifn[ancestry_data.ifn == "2"] <- "Homozygous_Eur"


methylation_data.ifn <- beta_values[match(intersect$CpG, rownames(beta_values)),]

methylation_data.ifn <- methylation_data.ifn %>% t() %>% as.data.frame()

methylation_data.ifn <- methylation_data.ifn %>% 
  mutate(uab_id = rownames(.)) %>% 
  relocate(uab_id)

methylation_data.ifn_pheno <- left_join(phenotypes_updated, methylation_data.ifn,
                                        by="uab_id")


methylation_ancestry <- left_join(methylation_data.ifn_pheno, ancestry_data.ifn, 
                  by="uab_id")

# Plot Beta Value for each Gene and their respective ancestry 
give.n <- function(x){return(c(y = -0.25, label = length(x)))} # function to give numbers

### By Genotype 
for(i in seq(length(intersect$CpG))){

cpg <- colnames(methylation_ancestry)[grep(intersect$CpG[i], colnames(methylation_ancestry))[1]]
cpg_ancestry <- colnames(methylation_ancestry)[grep(intersect$CpG[i], colnames(methylation_ancestry))[2]]
gene <- probe.features$gene[match(cpg, probe.features$CpG)] %>% droplevels() %>% as.character()

p1 <- methylation_ancestry %>%
        filter(!is.na(!! sym(cpg)) & !is.na(!! sym(cpg_ancestry))) %>% 
        ggplot(., aes(x = factor(disease_subset, levels = c("control", "ln-", "ln+")),
                      y = !! sym(cpg),
                      fill = factor(!! sym(cpg_ancestry), levels = c("Homozygous_Eur", "Hetero_Afr_Eur", "Homozygous_Afr")))) + 
        geom_boxplot()  +
        ggtitle(paste0("Local Ancestry at ", cpg, " (", gene, ") Region")) +
        labs(x="Disease Subset", y=paste0(cpg, " Beta Value")) +
        theme_bw() +
        scale_y_continuous(limits = c(-0.25,1.25)) +
        scale_x_discrete(labels = c("Control", "LN-", "LN+")) +
        scale_fill_manual(name = "Ancestry",
                          values = c("Homozygous_Eur" = "#274ae5", "Hetero_Afr_Eur" = "#8d6ad9", "Homozygous_Afr" = "#f2775c"),
                          labels = c("Homozygous European", "Heterozygous", "Homozygous African")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5))+
        stat_summary(fun.data = give.n, geom = "text", fun = median,
                     position = position_dodge(width = 1), vjust = -2, size = 5)

ggsave(p1, filename = paste0("ancestry_plots/", gene, "_", cpg, ".png"),
       width = 15, height = 10, dpi = 300)
}
```

############################################################################
# Supplemental Figure 2. Methylation Score across Medication Usage #########
############################################################################

```{r}
medication_meta <- read_csv("/cluster/home/pcallen/tmp_analysis/uab_sle_methylation_ancestry_study/data/sle_medication_table.csv")

#function to replace positive values with boolean
boolean_split <- function(x) {
  mutate(x = case_when(
    !is.na(x) ~ "Y",
    is.na(x) ~ "N"))
}

#hydroxychloroquine treatment
basal_treated <- medication_meta[,grep("uab_id|disease_subset|chloroquine|plaquenil", colnames(medication_meta))]

basal_treated <- basal_treated %>% 
  mutate(hydroxychloroquine = case_when(!is.na(hydroxychloroquine) | !is.na(`plaquenil+sulfate`) ~ "Y",
                                        is.na(hydroxychloroquine) | is.na(`plaquenil+sulfate`) ~ "N")) %>% 
  select(-`plaquenil+sulfate`)

basal_treated <- basal_treated %>% 
  rowwise() %>%
  dplyr::mutate(hydroxychloroquine = any(str_detect(c_across(-c(uab_id, disease_subset)), regex("Y", ignore_case = TRUE)), na.rm = TRUE))

#glucocorticoids
glucocorticoid_treated <- medication_meta[,colnames(medication_meta) %in% c("uab_id", "disease_subset", "betamethasone",
                                 "methylprednisolone", "prednisone",
                                 "triamcinolone", "triamcinolone+acetonide")]

glucocorticoid_treated <- glucocorticoid_treated %>% 
  mutate(betamethasone = case_when(!is.na(betamethasone) ~ "Y",
                                    is.na(betamethasone) ~ "N"),
         methylprednisolone = case_when(!is.na(methylprednisolone) ~ "Y",
                                    is.na(methylprednisolone) ~ "N"), 
         prednisone = case_when(!is.na(prednisone) ~ "Y",
                                    is.na(prednisone) ~ "N"),
         triamcinolone = case_when(!is.na(triamcinolone) ~ "Y",
                                    is.na(triamcinolone) ~ "N"),
         `triamcinolone+acetonide` = case_when(!is.na(`triamcinolone+acetonide`) ~ "Y",
                                    is.na(`triamcinolone+acetonide`) ~ "N"))

glucocorticoid_treated <- glucocorticoid_treated %>% 
  rowwise() %>%
  dplyr::mutate(glucocorticoids = any(str_detect(c_across(-c(uab_id, disease_subset)), regex("Y", ignore_case = TRUE)), na.rm = TRUE))

#immunosuppressants
immunosuppressant_treated <- medication_meta[,grep("uab_id|disease_subset|azathioprine|methotrexate|myco|cyclophosphamide", colnames(medication_meta))]

immunosuppressant_treated <- immunosuppressant_treated %>% 
  mutate(azathioprine = case_when(!is.na(azathioprine) ~ "Y",
                                    is.na(azathioprine) ~ "N"),
         cyclophosphamide = case_when(!is.na(cyclophosphamide) ~ "Y",
                                    is.na(cyclophosphamide) ~ "N"), 
         methotrexate = case_when(!is.na(methotrexate) ~ "Y",
                                    is.na(methotrexate) ~ "N"),
         `mycophenolate+mofetil` = case_when(!is.na(`mycophenolate+mofetil`) ~ "Y",
                                    is.na(`mycophenolate+mofetil`) ~ "N"),
         `mycophenolic+acid` = case_when(!is.na(`mycophenolic+acid`) ~ "Y",
                                    is.na(`mycophenolic+acid`) ~ "N"))

immunosuppressant_treated <- immunosuppressant_treated %>% 
  rowwise() %>%
  dplyr::mutate(immunosuppressants = any(str_detect(c_across(-c(uab_id, disease_subset)), regex("Y", ignore_case = TRUE)), na.rm = TRUE))

#biologics
biologic_treated <- medication_meta[grep("uab_id|disease_subset|belimumab", colnames(medication_meta))]

biologic_treated <- biologic_treated %>% 
  mutate(belimumab = case_when(!is.na(belimumab) ~ "Y",
                                    is.na(belimumab) ~ "N"))

biologic_treated <- biologic_treated %>% 
  rowwise() %>%
  dplyr::mutate(biologics = any(str_detect(c_across(-c(uab_id, disease_subset)), regex("Y", ignore_case = TRUE)), na.rm = TRUE))

library(plyr)

full_medication <- join_all(list(basal_treated, glucocorticoid_treated, immunosuppressant_treated, biologic_treated), by=c("uab_id", "disease_subset"), type='left') %>% as_tibble()

meta_full <- left_join(meta, full_medication, by=c("uab_id", "disease_subset"))
meta_cases <- meta_full %>% filter(grepl("ln", disease_subset)) %>% as_tibble() %>% mutate(group_factor = paste0(race, "_", disease_subset))

# LN Medication distribution
cases_medication <- full_medication %>% select(contains(c("uab_id", "disease", "cyclo", "myco", "belim"))) %>% dplyr::filter(grepl("ln", disease_subset))

nephritis_treated <- medication_meta[,grep("uab_id|disease_subset|myco|cyclophosphamide|belimumab", colnames(medication_meta))] 

nephritis_treated <- nephritis_treated %>% 
  mutate(cyclophosphamide = case_when(!is.na(cyclophosphamide) ~ "Y",
                                    is.na(cyclophosphamide) ~ "N"),
         `mycophenolate+mofetil` = case_when(!is.na(`mycophenolate+mofetil`) ~ "Y",
                                    is.na(`mycophenolate+mofetil`) ~ "N"),
         `mycophenolic+acid` = case_when(!is.na(`mycophenolic+acid`) ~ "Y",
                                    is.na(`mycophenolic+acid`) ~ "N"),
         belimumab = case_when(!is.na(belimumab) ~ "Y",
                                    is.na(belimumab) ~ "N"))

nephritis_treated <- nephritis_treated %>% 
  rowwise() %>%
  dplyr::mutate(nephritis_treatment = any(str_detect(c_across(-c(uab_id, disease_subset)), regex("Y", ignore_case = TRUE)), na.rm = TRUE))

# Plot differences in methylation score by medication ----
merged <- full_join(meta, (combined %>% dplyr::select("uab_id", "methylation_beta_zscore", "methylight_score")), by="uab_id") %>% filter(!is.na(methylation_beta_zscore)) %>% as_tibble()

give.n <- function(x){return(c(y = -3, label = length(x)))} # function to give numbers

## Hydroxychloroquine ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(hydroxychloroquine, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(hydroxychloroquine, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset)) +
        # ggtitle("Global Ancestry") +
        labs(x="Hydroxychloroquine", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_hydroxychloro.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)


### by race ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(hydroxychloroquine, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(hydroxychloroquine, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset), rows=vars(race)) +
        # ggtitle("Global Ancestry") +
        labs(x="Hydroxychloroquine", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_hydroxychloro_byRace.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

## Glucocorticoids ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(glucocorticoids, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(glucocorticoids, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset)) +
        # ggtitle("Global Ancestry") +
        labs(x="Glucocorticoids", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_glucocorticoids.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)


### by race ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(glucocorticoids, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(glucocorticoids, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset), rows=vars(race)) +
        # ggtitle("Global Ancestry") +
        labs(x="Glucocorticoids", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_glucocorticoids_byRace.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

## Immunosuppressants ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(immunosuppressants, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(immunosuppressants, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset)) +
        # ggtitle("Global Ancestry") +
        labs(x="Immunosuppressants", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_immunosuppressants.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

### by race ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(immunosuppressants, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(immunosuppressants, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset), rows=vars(race)) +
        # ggtitle("Global Ancestry") +
        labs(x="Immunosuppressants", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_immunosuppressants_byRace.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

## Biologics ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(biologics, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(biologics, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset)) +
        # ggtitle("Global Ancestry") +
        labs(x="Biologics", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_biologics.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)


### by race ----
merged %>% 
  filter(disease == "sle") %>% 
  ggplot(., aes(x = factor(biologics, levels = c("TRUE", "FALSE")),
                y = methylation_beta_zscore,
                fill = factor(biologics, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset), rows=vars(race)) +
        # ggtitle("Global Ancestry") +
        labs(x="Biologics", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.signif")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_biologics_byRace.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

# Nephritis Treatment (cyclophosphamide+mycophenolic acid+mycophenolate mofetil+belimumab)
nephritis_treated_merged <- full_join(nephritis_treated, (methylation_zscore %>% dplyr::select("uab_id", "race", "module_score")), by="uab_id") %>% filter(!is.na(module_score)) %>% as_tibble()

cases_nephritis_treated_merged <- nephritis_treated_merged %>% 
  filter(grepl("ln", disease_subset))

## exclude EA LN-
cases_nephritis_treated_merged <- cases_nephritis_treated_merged %>% 
  filter(!(race == "EA" & disease_subset=="ln-"))

cases_nephritis_treated_merged %>% 
  filter(grepl("ln", disease_subset)) %>% 
  ggplot(., aes(x = factor(nephritis_treatment, levels = c("TRUE", "FALSE")),
                y = module_score,
                fill = factor(nephritis_treatment, levels = c("TRUE", "FALSE")))) + 
        geom_boxplot(outlier.shape = NA) +
        geom_jitter(width = 0.2) +
        facet_grid(cols=vars(disease_subset), rows=vars(race)) +
        # ggtitle("Global Ancestry") +
        labs(x="LN Treatment", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-3,2)) +
        scale_x_discrete(labels = c("Yes", "No")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_summary(fun.data = give.n, geom = "text", fun = median, position = position_dodge(width = 1), size = 7) +
        stat_compare_means(comparisons = list(c("TRUE", "FALSE")), size = 7, label = "p.format")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_medication_methylationScore_ln_treatment_byRace.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)
```

##########################################################
# Supplemental Figure 3. Global Ancestry #################
##########################################################

```{r}
# Plot Proportions of Ancestry ----
table(merged$race, merged$afr_prop_percent)

give.n <- function(x){return(c(y = -0.12, label = length(x)))} # function to give numbers

merged %>% 
  ggplot(., aes(x = factor(race, levels = c("EA", "AA")),
                y = afr_prop,
                fill = factor(race, levels = c("EA", "AA")))) + 
  geom_boxplot()  +
  ggtitle("Global Ancestry") +
  labs(x = "Self-reported Race",
       y = "African Proportion") +
  scale_y_continuous(labels = scales::percent) +
  theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
  stat_summary(fun.data = give.n, geom = "text", fun = median, 
               position = position_dodge(width = 1), vjust = -2, size = 9)

ggsave("/cluster/home/pcallen/tmp_analysis/uab_sle_methylation_ancestry_study/global_ancestry.png", width=10, height=10, dpi=300)
```

###################################################################################################
# Supplemental Figure S4. Plot Methylation Score by Global African Ancestry Proportion ############
###################################################################################################
```{r}
library(tidyverse)
library(IlluminaHumanMethylationEPICanno.ilm10b2.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GenomicRanges)
library(plyranges)
library(data.table)
library(magrittr)

#Load all local ancestry calls
dir <- "/cluster/home/pcallen/projects/uab_sle_96/ancestry_gda/"

missing <- character()

for (i in c(1:nrow(metadata)))
{
  if(file.exists(paste(dir, metadata$uab_id[i], ".ancestry.formatted.txt", sep=""))){
	assign(paste(metadata$uab_id[i], "_ancestry", sep=""), fread(paste(dir, metadata$uab_id[i], ".ancestry.formatted.txt", sep=""), data.table=F) %>% t() %>% as.data.frame() %>% set_colnames(.[1,]) %>% set_rownames(c("Remove", metadata$uab_id[i])) %>% slice(n=-1)) 
    
}

  else {
    missing <- c(missing, metadata$uab_id[i])
    next
  }}

metadata_subset<- metadata %>% 
  dplyr::filter(!uab_id %in% missing)

#parse the text list of data frame names as a list of data frames
data_list <- eval(
  parse(text=paste(
    "list(", paste(
      paste(
        paste(metadata_subset$uab_id[c(1:nrow(metadata_subset))], "_ancestry", sep="")
      ), collapse=','
    ), ")"
  ))
)

#Stack all ancestry calls together using rbind.fill
all_ancestries <- dplyr::bind_rows(data_list)

rm(list = ls(pattern = "P3UAB|UAB"))
gc()

all_ancestries <- all_ancestries %>% 
  mutate(across(where(is.character), as.numeric))

# add african ancestry ----
african_prop <- all_ancestries %>% 
  mutate(African = rowSums(.[grep("Afr", colnames(.))], na.rm = T)) %>%
  dplyr::select(African)

metadata_subset$afr_prop <- african_prop$African[match(metadata_subset$uab_id, rownames(african_prop))]

## Plotting Methylation Score by global African Proportion split by disease ----

### Changing Proportion to range factor 
metadata_subset <- metadata_subset %>% 
  mutate(afr_prop_percent = case_when(
                              dplyr::between(afr_prop, 0, 0.2) ~ "0-20%",
                              dplyr::between(afr_prop, 0.2, 0.4) ~ "20-40%",
                              dplyr::between(afr_prop, 0.4, 0.6) ~ "40-60%",
                              dplyr::between(afr_prop, 0.6, 0.8) ~ "60-80%",
                              dplyr::between(afr_prop, 0.8, 1) ~ "80-100%"
  ))

# merging with combined data
merged <- full_join(metadata_subset, (methylation_zscore %>% dplyr::select("uab_id", "module_score")), by="uab_id") %>% filter(!is.na(module_score)) %>% as_tibble()

merged <- merged %>% 
  mutate(SLEDAI = case_when(
                            sel_score == 0 ~ 'No Activity (0)',
                            sel_score >= 1 & sel_score <= 5 ~ 'Mild Activity (1-5)',
                            sel_score >= 6 & sel_score <= 10 ~ 'Moderate Activity (6-10)',
                            sel_score >= 11 & sel_score <= 19 ~ 'High Activity (11-19)',
                            TRUE ~ "NA"      
                            )
        )

### Methylation Score vs global proportion by disease ----
merged %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = module_score,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_boxplot()  +
        facet_wrap(~disease) +
        # ggtitle("Global Ancestry") +
        labs(x="African Proportion", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-2,2)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_methylationScore.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

### Methylation Score vs global proportion by disease_subset ----
merged %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = module_score,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_boxplot()  +
        facet_wrap(~disease_subset) +
        # ggtitle("Global Ancestry") +
        labs(x="African Proportion", 
             y="Methylation Score") +
        theme_bw() +
        scale_y_continuous(limits = c(-2,2)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 20), plot.title = element_text(hjust = 0.5),
              legend.position = "none")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_methylationScore_subset.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)
```

###########################################################################
# Supplemental Figure S5. SLEDAI/SDI by African Proportion ################
###########################################################################

```{r}
### SLEDAI Score vs global proportion by disease ----
merged %>% 
  filter(!disease_subset == "control") %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = sel_score,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_violin(alpha = 0.5) +
        geom_point(position = position_jitter(seed = 1, width = 0.2)) +
        labs(x="African Proportion", 
             y="SLEDAI") +
        theme_bw() +
        scale_y_continuous(limits = c(0,14)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_sledaiScore.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

### Methylation Score vs global proportion by disease_subset ----
merged %>% 
  filter(!disease_subset == "control") %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = sel_score,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_violin(alpha = 0.5) +
        geom_point(position = position_jitter(seed = 1, width = 0.2)) +
        facet_wrap(~disease_subset) +
        labs(x="African Proportion", 
             y="SLEDAI") +
        theme_bw() +
        # scale_y_continuous(limits = c(0,14)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_compare_means(comparisons = list(c("0-20%", "60-80%"), c("0-20%", "80-100%"), c("60-80%", "80-100%")), size = 7, label = "p.format")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_sledaiScore_subset.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)


### SLICC Score vs global proportion by disease ----
merged %>% 
  filter(!disease_subset == "control") %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = slicc_index,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_violin(alpha = 0.5) +
        geom_point(position = position_jitter(seed = 1, width = 0.2)) +
        labs(x="African Proportion", 
             y="SLICC Index") +
        theme_bw() +
        scale_y_continuous(limits = c(0,8)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none")

ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_sliccScore.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)

### Methylation Score vs global proportion by disease_subset ----
merged %>% 
  filter(!disease_subset == "control") %>% 
  ggplot(., aes(x = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")),
                y = slicc_index,
                fill = factor(afr_prop_percent, levels = c("0-20%", "40-60%", "60-80%", "80-100%")))) + 
        geom_violin(alpha = 0.5) +
        geom_point(position = position_jitter(seed = 1, width = 0.2)) +
        facet_wrap(~disease_subset) +
        labs(x="African Proportion", 
             y="SLICC Index") +
        theme_bw() +
        # scale_y_continuous(limits = c(0,8)) +
        scale_x_discrete(labels = c("0-20%", "40-60%", "60-80%", "80-100%")) +
        theme(text = element_text(size = 25), plot.title = element_text(hjust = 0.5),
              legend.position = "none") +
        stat_compare_means(comparisons = list(c("0-20%", "60-80%"), c("0-20%", "80-100%"), c("60-80%", "80-100%")), size = 7, label = "p.format")


ggsave(filename = "~/tmp_analysis/uab_sle_methylation_ancestry_study/supplemental_global_ancestry_sliccScore_subset.png",
       width = 17.136, height=10.5, units = "in", dpi = 400)
```